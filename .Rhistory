shiny::runApp()
runApp()
library("tidyverse")
library("sf")
library("tidyverse")
library("leaflet")
## Obtained maps from http://www.naturalearthdata.com/downloads/50m-cultural-vectors/
download.file(
url = "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
destfile = "data-raw/world-shape-files.zip"
)
unzip("data-raw/world-shape-files.zip", exdir = "data-raw/world-shape-files")
unlink("data-raw/world-shape-files.zip")
## Read in data using sf
world_shapefiles <- st_read("data-raw/world-shape-files/")
class(world_shapefiles)
world_shapefiles
save(world_shapefiles, file = "data-raw/world_shapefiles.rdata")
unzip("data-raw/world-shape-files.zip", exdir = "data-raw/world-shape-files")
getdir()
dir()
library("sf")
library("tidyverse")
library("leaflet")
## Obtained maps from http://www.naturalearthdata.com/downloads/50m-cultural-vectors/
download.file(
url = "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
destfile = "./data-raw/world-shape-files.zip"
)
unzip("data-raw/world-shape-files.zip", exdir = "data-raw/world-shape-files")
unlink("data-raw/world-shape-files.zip")
world_shapefiles <- st_read("data-raw/world-shape-files/")
library("sf")
library("tidyverse")
library("leaflet")
## Obtained maps from http://www.naturalearthdata.com/downloads/50m-cultural-vectors/
download.file(
url = "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
destfile = "./data-raw/world-shape-files.zip"
)
unzip("data-raw/world-shape-files.zip", exdir = "data-raw/world-shape-files")
world_shapefiles <- st_read("./data-raw/world-shape-files/")
unlink("data-raw/world-shape-files.zip")
world_shapefiles <- st_read("./data-raw/world-shape-files/")
world_shapefiles <- st_read("./data-raw/world-shape-files")
class(world_shapefiles)
world_shapefiles
save(world_shapefiles, file = "data-raw/world_shapefiles.rdata")
runApp()
runApp()
addLegendCustom <- function(map, colors, labels, sizes, opacity = 0.5){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ", sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>", labels, "</div>")
return(addLegend(map, colors = colorAdditions, labels = labelAdditions, opacity = opacity))
}
leaflet(gedDataR) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegendCustom(colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegendCustom(colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegendCustom("bottomright", colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
labelAdditions <- paste0("<div style='display: inline-block;height: ", sizes, "px;margin-bottom: 4px;line-height: ", sizes, "px;'>", labels, "</div>")
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegendCustom("bottomright", colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
colors
return(addLegend(map, colors = colorAdditions, labels = labelAdditions, opacity = opacity, position="bottomright"))
addLegendCustom <- function(map, colors, labels, sizes, opacity = 0.5){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ", sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>", labels, "</div>")
return(addLegend(map, colors = colorAdditions, labels = labelAdditions, opacity = opacity, position="bottomright"))
}
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegendCustom(colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
library(shiny)
library(leaflet)
#create data
Points<-data.frame(x=runif(10,20,21), y=runif(10,0,1), var=rep(c(5,10),5))
map = leaflet() %>% addTiles()
# Set up shiny app
shinyApp(
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}",
".leaflet .legend i{
border-radius: 50%;
width: 10px;
height: 10px;
margin-top: 4px;
}
"),
leafletOutput("myMap", width = "100%", height = "100%")
),
server = function(input, output){
addLegendCustom <- function(map, colors, labels, sizes, opacity = 0.5){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ", sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>", labels, "</div>")
return(addLegend(map, colors = colorAdditions, labels = labelAdditions, opacity = opacity))
}
output$myMap = renderLeaflet({map %>%
addCircleMarkers(Points$x,Points$y,radius=Points$var) %>%
addLegendCustom(colors = c("blue", "blue", "red"), labels = c("A", "B", "C"), sizes = c(10, 20, 40))
})
}
)
runApp('test-legend.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('tesLegend.R')
source('C:/Users/Hannah.Smidt/Dropbox/Post-Doc/CCCtool/Code/appMap2/tesLegend.R')
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE),
verbatimTextOutput("clickInfo")
)
)
server <- function(input, output, session) {
output$clickInfo = renderPrint({input$map_marker_click})
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircleMarkers(radius = ~mag^2/3, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
observe({
proxy <- leafletProxy("map", data = quakes)
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rnorm(100)
quantile(rnorm(100), c(0.25. 0.5, 0.75, 1) )
quantile(rnorm(100), c(0.25, 0.5, 0.75, 1) )
sizesLegend <- quantile(data$weights, c(0.25, 0.5, 0.75, 1) )
runApp()
runApp()
runApp()
download.file(url = "http://ucdp.uu.se/downloads/ged/ged171-RData.zip", destfile = "data-raw/ucdp-data.zip")
unzip(exdir = "data-raw/ucdp-data", zipfile = "data-raw/ucdp-data.zip")
load("data-raw/ucdp-data/ged171.Rdata")
source("process-udcp-data.R", local = TRUE)
min(gedDataR$best)
min(gedDataR$weights)
gedDataR$weights <- log(gedDataR$best)
gedDataR$weights[gedDataR$weights < 0] <- 0
gedDataR$weights <-NA
gedDataR$weights <- log(gedDataR$best)
gedDataR$weights[gedDataR$weights < 0] <- 0
min(gedDataR$weights)
gedDataR$weights <-NA
gedDataR$weights <- log(gedDataR$best)
gedDataR$weights
gedDataR$weights <-NA
gedDataR$weights <- log(gedDataR$best)
gedDataR$weights[gedDataR$weights < 0] <- min(gedDataR$weights)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
ged171 <- read_csv("data-raw/ucdp-data/ged171.csv")
unique(ged171$country)
runApp()
ged171 <- read_csv("data-raw/ucdp-data/ged171.csv")
excluded_dyads <- c("Government of Congo|Zimbabwe|Angola|Uganda") # Governments that are not the ones of the focus cases
focus_country_names <- c("Colombia",
"Venezuela",
"Rwanda",
"Burundi",
"DR Congo (Zaire)",
"Afghanistan",
"Pakistan",
"Iraq",
"Mexico",
"Myanmar (Burma)")
focus_dyads <- ged171 %>%
filter(country %in% focus_country_names) %>%
select(dyad_name) %>%
.[[1]] %>%
unique()
gedDataR <- ged171 %>%
filter(dyad_name %in% focus_dyads) %>%
filter(!grepl(excluded_dyads, dyad_name)) %>%
select(country, year, best, type_of_violence, latitude, longitude) %>%
rename(type_of_vi = type_of_violence) %>%
distinct()
gedDataR[gedDataR$country=="Nigeria",]
ged171[which(gedDataR$country=="Nigeria" & YEAR==2016),]
ged171[which(gedDataR$country=="Nigeria" & year==2016),]
names(ged171)
ged171[which(gedDataR$country=="Nigeria" & gedDataR$year==2016),]
# Task: Download and manipulate UCDP data
download.file(url = "http://ucdp.uu.se/downloads/ged/ged171-csv.zip", destfile = "data-raw/ucdp-data.zip")
unzip(exdir = "data-raw/ucdp-data", zipfile = "data-raw/ucdp-data.zip")
ged171 <- read_csv("data-raw/ucdp-data/ged171.csv")
excluded_dyads <- c("Government of Congo|Zimbabwe|Angola|Uganda") # Governments that are not the ones of the focus cases
focus_country_names <- c("Colombia",
"Venezuela",
"Rwanda",
"Burundi",
"DR Congo (Zaire)",
"Afghanistan",
"Pakistan",
"Iraq",
"Mexico",
"Myanmar (Burma)")
focus_dyads <- ged171 %>%
filter(country %in% focus_country_names) %>%
select(dyad_name) %>%
.[[1]] %>%
unique()
gedDataR <- ged171 %>%
filter(dyad_name %in% focus_dyads) %>%
filter(!grepl(excluded_dyads, dyad_name)) %>%
select(country, year, dyad_name, best, type_of_violence, latitude, longitude) %>%
rename(type_of_vi = type_of_violence) %>%
distinct()
gedDataR[which(gedDataR$country=="Nigeria" & gedDataR$year==2016),]
runApp()
download.file(url = "http://ucdp.uu.se/downloads/ged/ged171-csv.zip", destfile = "data-raw/ucdp-data.zip")
unzip(exdir = "data-raw/ucdp-data", zipfile = "data-raw/ucdp-data.zip")
ged171 <- read_csv("data-raw/ucdp-data/ged171.csv")
excluded_dyads <- c("Government of Congo|Zimbabwe|Angola|Uganda") # Governments that are not the ones of the focus cases
focus_country_names <- c("Colombia",
"Venezuela",
"Rwanda",
"Burundi",
"DR Congo (Zaire)",
"Afghanistan",
"Pakistan",
"Iraq",
"Mexico",
"Myanmar (Burma)"
,"Somalia"
,"Philippines"
,"Ukraine"
,"Nigeria")
focus_dyads <- ged171 %>%
filter(country %in% focus_country_names) %>%
select(dyad_name) %>%
.[[1]] %>%
unique()
# Shiny App
library("shiny")
library("leaflet")
library("sf")
library("tidyverse")
library("shinyjs")
focus_dyads <- ged171 %>%
filter(country %in% focus_country_names) %>%
select(dyad_name) %>%
.[[1]] %>%
unique()
ged171 <- read_csv("data-raw/ucdp-data/ged171.csv")
excluded_dyads <- c("Government of Congo|Zimbabwe|Angola|Uganda") # Governments that are not the ones of the focus cases
focus_country_names <- c("Colombia",
"Venezuela",
"Rwanda",
"Burundi",
"DR Congo (Zaire)",
"Afghanistan",
"Pakistan",
"Iraq",
"Mexico",
"Myanmar (Burma)",
"Somalia",
"Philippines",
"Ukraine",
"Nigeria")
focus_dyads <- ged171 %>%
filter(country %in% focus_country_names) %>%
select(dyad_name) %>%
.[[1]] %>%
unique()
gedDataR <- ged171 %>%
filter(dyad_name %in% focus_dyads) %>%
filter(!grepl(excluded_dyads, dyad_name)) %>%
select(country, year, dyad_name, best, type_of_violence, latitude, longitude) %>%
rename(type_of_vi = type_of_violence) %>%
distinct()
# Shiny App
library("shiny")
library("leaflet")
library("sf")
library("tidyverse")
library("shinyjs")
source("process-udcp-data.R", local = TRUE)
load("data-raw/world_shapefiles.rdata")
focus_countries <- world_shapefiles %>%
filter(GU_A3 %in% c(
"COL",
"VEN",
"AFG",
"PAK",
"MEX",
"MMR",
"IRQ",
"SYR",
"RWA",
"BDI",
"COD",
"NGA",
"UKR",
"SOM",
"PHL"
))
colors_list <- list("Violence against/from state" = "#1B9E77",
"Violence between non-state actors" = "#D95F02",
"Violence against civilians" = "#7570B3")
pal <- colorFactor(palette = "Dark2", domain = gedDataR$type_of_vi)
gedDataR$colors <- pal(gedDataR$type_of_vi)
colorsLegend <- unique(pal(gedDataR$type_of_vi))
gedDataR$weights <-NA
gedDataR$weights <- log(gedDataR$best)
gedDataR$weights[gedDataR$weights < 0] <- min(gedDataR$weights)
runApp()
runApp()
